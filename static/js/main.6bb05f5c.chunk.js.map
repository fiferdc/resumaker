{"version":3,"sources":["components/personal/PersonalItem.tsx","components/personal/Personal.tsx","components/education/Degree.tsx","components/education/Education.tsx","components/experience/ExperiencePosition.tsx","components/experience/Experience.tsx","components/skills/Skills.tsx","components/Section.tsx","App.js","resumeTypes.ts","serviceWorker.js","resume.ts","index.js"],"names":["SupportedIconTypes","PersonalItem","props","icon","type","Home","Phone","Email","Github","Linkedin","getIcon","className","children","Personal","personal","address","streetAddress","line1","cityStateZip","city","state","zip","style","display","flexDirection","email","phone","Degree","degree","school","degrees","subject","map","fontWeight","level","obtained","Education","education","ExperiencePosition","position","accomplishments","accomplishment","accomplishmentHead","substring","endsWith","console","warn","fontStyle","role","start","end","marginTop","marginBottom","Experience","experience","positions","company","location","Skills","skills","Object","entries","skill","values","join","Section","title","App","DegreeLevel","resume","width","height","borderBottom","marginLeft","marginRight","name","textAlign","Boolean","window","hostname","match","MS","BS","ReactDOM","render","StrictMode","Resume","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOASYA,E,4EAAAA,K,YAAAA,E,cAAAA,E,cAAAA,E,gBAAAA,E,qBAAAA,M,KAQZ,IAqBaC,EAA4C,SAACC,GACxD,IAAMC,EAtBQ,SAACC,GACf,OAAQA,GACN,KAAKJ,EAAmBK,KACtB,OAAQ,kBAAC,IAAD,MACV,KAAKL,EAAmBM,MACtB,OAAQ,kBAAC,IAAD,MACV,KAAKN,EAAmBO,MACtB,OAAQ,kBAAC,IAAD,MACV,KAAKP,EAAmBQ,OACtB,OAAQ,kBAAC,IAAD,MACV,KAAKR,EAAmBS,SACtB,OAAQ,kBAAC,IAAD,MACV,QACE,QASSC,CAAQR,EAAME,MAC3B,OACE,yBAAKO,UAAU,gBAAgBR,EAAMD,EAAMU,WCjClCC,EAAoC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACzCC,EAAYD,EAAZC,QACFC,EAAgBD,EAAQE,MACxBC,EAAY,UAAMH,EAAQI,KAAd,aAAuBJ,EAAQK,MAA/B,YAAwCL,EAAQM,KAElE,OACE,yBAAKV,UAAU,YACb,yBAAKW,MAAO,CAACC,QAAS,OAAQC,cAAe,WACzC,kBAAC,EAAD,CAAcpB,KAAMJ,EAAmBK,MACpCW,EADH,IACkB,6BACfE,GAEH,kBAAC,EAAD,CAAcd,KAAMJ,EAAmBO,OACpCO,EAASW,OAEZ,kBAAC,EAAD,CAAcrB,KAAMJ,EAAmBM,OACpCQ,EAASY,OAEZ,kBAAC,EAAD,CAActB,KAAMJ,EAAmBQ,QACpC,WAEH,kBAAC,EAAD,CAAcJ,KAAMJ,EAAmBS,UACpC,cCtBAkB,EAAgC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OAE/CC,GADsC,kBAAnBF,EAAOG,QAAwB,CAAEH,EAAOG,SAAYH,EAAOG,SAC3DC,KAAI,SAAAD,GAAO,OAClC,yBAAKT,MAAO,CAACW,WAAY,SACtBL,EAAOM,MADV,OACqBH,MAGvB,OACA,yBAAKpB,UAAU,UACZmB,EACD,6BACGD,GAEH,6BACGD,EAAOO,YCdDC,EAAsC,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAC7CP,EAAUO,EAAUP,QAAQE,KAAI,SAAAJ,GAAM,OAC1C,kBAAC,EAAD,CAAQA,OAAQA,EAAQC,OAAQQ,EAAUR,YAE5C,OACE,yBAAKlB,UAAU,aACZmB,ICPMQ,EAAwD,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC/DC,EAAkBD,EAASC,gBAAgBR,KAAI,SAAAS,GACnD,IAAMC,EAAkB,WAAOD,EAAeE,UAAU,EAAG,IAAnC,QAIxB,OAHKF,EAAeG,SAAS,MAC3BC,QAAQC,KAAR,yBAA+BJ,EAA/B,iCAGA,4BAAKD,MAIT,OACE,6BACE,yBAAK9B,UAAU,YAAYW,MAAO,CAACW,WAAY,OAAQc,UAAW,WAChE,8BACGR,EAASS,MAEZ,8BACGT,EAASU,MADZ,MACsBV,EAASW,KAAO,YAGxC,wBAAI5B,MAAO,CAAC6B,UAAW,SAAUC,aAAc,UAAWZ,KCpBnDa,EAAwC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAC/CC,EAAYD,EAAWC,UAAUvB,KAAI,SAAAO,GAAQ,OACjD,kBAAC,EAAD,CAAoBA,SAAUA,OAGhC,OACE,yBAAK5B,UAAU,aAAaW,MAAO,CAAC8B,aAAc,QAChD,6BACE,0BAAM9B,MAAO,CAACW,WAAY,SACvBqB,EAAWE,QADd,gBACoCF,EAAWG,WAGjD,6BACGF,K,QCfIG,EAAgC,SAACxD,GAC5C,IAAMyD,EAASC,OAAOC,QAAQ3D,EAAMyD,QAAQ3B,KAAI,mCAAE8B,EAAF,KAASC,EAAT,YAC9C,6BACE,yBAAKzC,MAAO,CAACW,WAAY,SACtB6B,GAEH,6BACIC,EAAoBC,KAAK,WAKjC,OACE,yBAAKrD,UAAU,UACZgD,ICdMM,EAAkC,SAAC/D,GAC9C,OACE,yBAAKS,UAAU,WACb,0BAAMA,UAAU,SACbT,EAAMgE,OAERhE,EAAMU,WCiCEuD,ICXHC,EDWGD,EApCf,YAAwB,IAAVE,EAAS,EAATA,OACNf,EAAae,EAAOf,WAAWtB,KAAI,SAAAsB,GAAU,OACjD,kBAAC,EAAD,CAAYA,WAAYA,OAEpBjB,EAAYgC,EAAOhC,UAAUL,KAAI,SAAAK,GAAS,OAC9C,kBAAC,EAAD,CAAWA,UAAWA,OAExB,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,QACb,0BAAMW,MAAO,CAACC,QAAS,eAAgB+C,MAAO,MAAOC,OAAQ,QAASC,aAAc,mBAApF,QACA,0BAAMlD,MAAO,CAACmD,WAAY,MAAOC,YAAa,QAASL,EAAOvD,SAAS6D,MACvE,0BAAMrD,MAAO,CAACC,QAAS,eAAgB+C,MAAO,MAAOC,OAAQ,QAASC,aAAc,mBAApF,SAEF,yBAAK7D,UAAU,qBACb,8BACE,kBAAC,EAAD,CAASuD,MAAM,WACb,kBAAC,EAAD,CAAUpD,SAAUuD,EAAOvD,YAE7B,kBAAC,EAAD,CAASoD,MAAM,aACZ7B,GAEH,kBAAC,EAAD,CAAS6B,MAAM,mBACb,kBAAC,EAAD,CAAQP,OAAQU,EAAOV,WAG3B,0BAAMrC,MAAO,CAACsD,UAAW,SACvB,kBAAC,EAAD,CAASV,MAAM,cACZZ,OEzBOuB,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,4D,SDgBMZ,K,UAAAA,E,UAAAA,E,WAAAA,M,KEhCG,OACZtD,SAAU,CACP6D,KAAM,cACN5D,QAAS,CACNE,MAAO,0BACPE,KAAM,UACNC,MAAO,KACPC,IAAK,SAERI,MAAO,oBACPC,MAAO,kBAEVW,UAAW,CACR,CACGR,OAAQ,oBACR4B,SAAU,qBACV3B,QAAS,CACN,CACGI,MAAOkC,EAAYa,GACnBlD,QAAS,mBACTI,SAAU,YAEb,CACGD,MAAOkC,EAAYc,GACnBnD,QAAS,CACN,0BACA,QAEHI,SAAU,eAKtBmB,WAAY,CACT,CACGE,QAAS,SACTC,SAAU,cACVF,UAAW,CACR,CACGP,KAAM,SACNC,MAAO,gBACPT,gBAAiB,CACd,8DACA,0FACA,oFAKZ,CACGgB,QAAS,WACTC,SAAU,mBACVF,UAAW,CACR,CACGP,KAAM,2BACNC,MAAO,gBACPC,IAAK,eACLV,gBAAiB,CACd,oHACA,yGACA,+FACA,kEACA,2FACA,6DAGN,CACGQ,KAAM,oBACNC,MAAO,cACPC,IAAK,gBACLV,gBAAiB,CACd,iHACA,+GACA,uGACA,+DACA,wFAKZ,CACGgB,QAAS,6CACTC,SAAU,mBACVF,UAAW,CACR,CACGP,KAAM,wBACNC,MAAO,aACPC,IAAK,cACLV,gBAAiB,CACd,uDACA,kDACA,uFACA,8FACA,2FACA,8FAKZ,CACGgB,QAAS,mBACTC,SAAU,aACVF,UAAW,CACR,CACGP,KAAM,gCACNC,MAAO,YACPC,IAAK,gBACLV,gBAAiB,CACd,qEACA,qHACA,qFACA,mFACA,qHAKZ,CACGgB,QAAS,SACTC,SAAU,oBACVF,UAAW,CACR,CACGP,KAAM,gBACNC,MAAO,WACPC,IAAK,cACLV,gBAAiB,CACd,6EACA,mFAMfmB,OAAQ,CACL,UAAa,CACV,wBACA,cACA,QACA,UAEH,UAAa,CACV,OACA,SACA,UACA,UACA,WAEH,oBAAqB,CAClB,MACA,QACA,MACA,UACA,QACA,aACA,SACA,eCtJTwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKhB,OAAQiB,KAEfC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.6bb05f5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n  Home,\r\n  Phone, \r\n  Email, \r\n  Github,\r\n  Linkedin\r\n} from 'mdi-material-ui';\r\n\r\nexport enum SupportedIconTypes {\r\n  Home = 'Home',\r\n  Phone = 'Phone',\r\n  Email = 'Email',\r\n  Github = 'Github',\r\n  Linkedin = 'Linkedin'\r\n}\r\n\r\nconst getIcon = (type: SupportedIconTypes) => {\r\n  switch (type) {\r\n    case SupportedIconTypes.Home:\r\n      return (<Home />);\r\n    case SupportedIconTypes.Phone:\r\n      return (<Phone />);\r\n    case SupportedIconTypes.Email:\r\n      return (<Email />);\r\n    case SupportedIconTypes.Github:\r\n      return (<Github />);\r\n    case SupportedIconTypes.Linkedin:\r\n      return (<Linkedin />);\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\ntype PersonalItemProps = {\r\n  type: SupportedIconTypes\r\n}\r\n\r\nexport const PersonalItem: React.FC<PersonalItemProps> = (props) => {\r\n  const icon = getIcon(props.type);\r\n  return (\r\n    <div className='PersonalItem'>{icon}{props.children}</div>\r\n  )\r\n}","import React from 'react';\r\nimport * as ResumeTypes from '../../resumeTypes';\r\nimport { PersonalItem, SupportedIconTypes } from './PersonalItem';\r\n\r\ntype PersonalProps = {\r\n  personal: ResumeTypes.Personal;\r\n}\r\n\r\nexport const Personal: React.FC<PersonalProps> = ({personal}) => {\r\n  const { address } = personal;\r\n  const streetAddress = address.line1;\r\n  const cityStateZip = `${address.city}, ${address.state} ${address.zip}`;\r\n\r\n  return (\r\n    <div className='Personal'>\r\n      <div style={{display: 'flex', flexDirection: 'column'}}>\r\n          <PersonalItem type={SupportedIconTypes.Home}>\r\n            {streetAddress} <br/>\r\n            {cityStateZip}\r\n          </PersonalItem>\r\n          <PersonalItem type={SupportedIconTypes.Email}>\r\n            {personal.email}\r\n          </PersonalItem>\r\n          <PersonalItem type={SupportedIconTypes.Phone}>\r\n            {personal.phone}\r\n          </PersonalItem>\r\n          <PersonalItem type={SupportedIconTypes.Github}>\r\n            {'fiferdc'}\r\n          </PersonalItem>\r\n          <PersonalItem type={SupportedIconTypes.Linkedin}>\r\n            {'fiferdc'}\r\n          </PersonalItem>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport * as ResumeTypes from '../../resumeTypes';\r\n\r\ntype DegreeProps = {\r\n  degree: ResumeTypes.Degree,\r\n  school: string\r\n}\r\n\r\nexport const Degree: React.FC<DegreeProps> = ({degree, school}) => {\r\n  const subjects = (typeof degree.subject === 'string') ? [ degree.subject ] : degree.subject;\r\n  const degrees = subjects.map(subject => (\r\n    <div style={{fontWeight: 'bold'}}>\r\n      {degree.level} in {subject}\r\n    </div>\r\n  ));\r\n  return (\r\n  <div className='Degree'>\r\n    {degrees}\r\n    <div>\r\n      {school}\r\n    </div>\r\n    <div>\r\n      {degree.obtained}\r\n    </div>\r\n  </div>\r\n  )\r\n}","import React from 'react';\r\nimport * as ResumeTypes from '../../resumeTypes';\r\nimport { Degree } from './Degree';\r\n\r\ntype EducationProps = {\r\n    education: ResumeTypes.Education\r\n}\r\n\r\nexport const Education: React.FC<EducationProps> = ({education}) => {\r\n  const degrees = education.degrees.map(degree => (\r\n    <Degree degree={degree} school={education.school}/>\r\n  ))\r\n  return (\r\n    <div className='Education'>\r\n      {degrees}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport * as ResumeTypes from '../../resumeTypes';\r\n\r\ntype ExperiencePositionProps = {\r\n  position: ResumeTypes.ExperiencePosition\r\n}\r\n\r\nexport const ExperiencePosition: React.FC<ExperiencePositionProps> = ({position}) => {\r\n  const accomplishments = position.accomplishments.map(accomplishment => {\r\n    const accomplishmentHead = `\"${accomplishment.substring(0, 10)}\"...`\r\n    if (!accomplishment.endsWith('.')) {\r\n      console.warn(`Accomplishment ${accomplishmentHead} does not end with a period.`);\r\n    }\r\n    return (\r\n      <li>{accomplishment}</li>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className='twoColumn' style={{fontWeight: 'bold', fontStyle: 'italic'}}>\r\n        <span>\r\n          {position.role}\r\n        </span>\r\n        <span>\r\n          {position.start} - {position.end || 'Present'}\r\n        </span>\r\n      </div>  \r\n      <ul style={{marginTop: '0.25em', marginBottom: '0.5em'}}>{accomplishments}</ul>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport * as ResumeTypes from '../../resumeTypes';\r\nimport { ExperiencePosition } from './ExperiencePosition';\r\n\r\ntype ExperienceProps = {\r\n  experience: ResumeTypes.Experience\r\n}\r\n\r\nexport const Experience: React.FC<ExperienceProps> = ({experience}) => {\r\n  const positions = experience.positions.map(position => (\r\n    <ExperiencePosition position={position}/>\r\n  ))\r\n  \r\n  return (\r\n    <div className='experience' style={{marginBottom: '1em'}}>\r\n      <div>\r\n        <span style={{fontWeight: 'bold'}}>\r\n          {experience.company} /           {experience.location}\r\n        </span>\r\n      </div>  \r\n      <div>\r\n        {positions}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\ntype SkillsProps = {\r\n  skills: any;\r\n}\r\n\r\nexport const Skills: React.FC<SkillsProps> = (props) => {\r\n  const skills = Object.entries(props.skills).map(([skill, values]) => (\r\n    <div>\r\n      <div style={{fontWeight: 'bold'}}>\r\n        {skill}\r\n      </div>\r\n      <div>\r\n        {(values as string[]).join(', ')}\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className='Skills'>\r\n      {skills}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\ntype SectionProps = {\r\n    title: string\r\n}\r\n\r\nexport const Section: React.FC<SectionProps> = (props) => {\r\n  return (\r\n    <div className='Section'>\r\n      <span className='Title'>\r\n        {props.title}\r\n      </span>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport './resume.css'\r\nimport { Personal } from './components/personal/Personal';\r\nimport { Education } from './components/education/Education';\r\nimport { Experience } from './components/experience/Experience';\r\nimport { Skills } from './components/skills/Skills';\r\nimport { Section } from './components/Section';\r\n\r\nfunction App({resume}) {\r\n  const experience = resume.experience.map(experience => \r\n    <Experience experience={experience}/>\r\n  )\r\n  const education = resume.education.map(education => \r\n    <Education education={education}/>\r\n  )\r\n  return (\r\n    <div className='App'>\r\n      <div className='Name'>\r\n        <span style={{display: 'inline-block', width: '5em', height: '0.6em', borderBottom: '1pt solid #333'}}>&nbsp;</span>\r\n        <span style={{marginLeft: '1em', marginRight: '1em'}}>{resume.personal.name}</span>\r\n        <span style={{display: 'inline-block', width: '5em', height: '0.6em', borderBottom: '1pt solid #333'}}>&nbsp;</span>\r\n      </div>\r\n      <div className='primary twoColumn'>\r\n        <span>\r\n          <Section title='Contact'>\r\n            <Personal personal={resume.personal} />\r\n          </Section>\r\n          <Section title='Education'>\r\n            {education}\r\n          </Section>\r\n          <Section title='Computer Skills'>\r\n            <Skills skills={resume.skills} />\r\n          </Section>\r\n        </span>\r\n        <span style={{textAlign: 'left'}}>\r\n          <Section title='Experience'>\r\n            {experience}\r\n          </Section>  \r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export interface Resume {\r\n    personal: Personal;\r\n    education: Education[];\r\n    experience: Experience[];\r\n    skills: any\r\n}\r\n\r\nexport interface Personal {\r\n    name: string;\r\n    address: Address;\r\n    email: string;\r\n    phone: string;\r\n}\r\n\r\nexport interface Address {\r\n    line1: string;\r\n    line2?: string;\r\n    city: string;\r\n    state: string;\r\n    zip: string;\r\n}\r\n\r\nexport interface Education {\r\n    school: string;\r\n    location: string;\r\n    degrees: Degree[];\r\n}\r\n\r\nexport interface Degree {\r\n    level: DegreeLevel;\r\n    subject: string | string[];\r\n    obtained?: string;\r\n}\r\n\r\nexport enum DegreeLevel {\r\n    BS = 'B.S.',\r\n    MS = 'M.S.',\r\n    PhD = 'PhD'\r\n}\r\n\r\nexport interface Experience {\r\n    company: string;\r\n    location: string;\r\n    positions: ExperiencePosition[];\r\n}\r\n\r\nexport interface ExperiencePosition {\r\n    role: string;\r\n    start: string;\r\n    end?: string;\r\n    accomplishments: string[]\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Resume, DegreeLevel } from './resumeTypes';\r\n\r\nexport default {\r\n   personal: {\r\n      name: 'David Fifer',\r\n      address: {\r\n         line1: '13931 Conner Knoll Pkwy',\r\n         city: 'Fishers',\r\n         state: 'IN',\r\n         zip: '46038'\r\n      },\r\n      email: 'fiferdc@gmail.com',\r\n      phone: '(317) 410-5284'\r\n   },\r\n   education: [\r\n      {\r\n         school: 'Purdue University',\r\n         location: 'West Lafayette, IN',\r\n         degrees: [\r\n            {\r\n               level: DegreeLevel.MS,\r\n               subject: 'Computer Science',\r\n               obtained: 'May 2015'\r\n            },\r\n            {\r\n               level: DegreeLevel.BS,\r\n               subject: [\r\n                  'Computer Science Honors',\r\n                  'Math'\r\n               ],\r\n               obtained: 'May 2014'\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   experience: [\r\n      {\r\n         company: 'Amazon',\r\n         location: 'Detroit, MI',\r\n         positions: [\r\n            {\r\n               role: 'SDE II',\r\n               start: 'February 2021',\r\n               accomplishments: [\r\n                  'Enabled Cypress UI tests to run on a new hardware platform.',\r\n                  'Conducted office hours, triaged incoming issues, and participated in on-call rotations.',\r\n                  'Orchestrated a multi-region DNS flip of production services with no downtime.'\r\n               ]\r\n          }\r\n         ]\r\n      },\r\n      {\r\n         company: 'LifeOmic',\r\n         location: 'Indianapolis, IN',\r\n         positions: [\r\n            {\r\n               role: 'Senior Software Engineer',\r\n               start: 'November 2019',\r\n               end: 'January 2021',\r\n               accomplishments: [\r\n                  'Built a lightweight version of the LIFE Extend mobile app for Fitbit Versa trackers and handled all user support.',\r\n                  'Migrated over 6000 active Fitbit users to a subscription-based ingestion model with disaster recovery.',\r\n                  'Designed a multi-channel Mirth pipeline to discover, download, and delete BIOTRONIK exports.',\r\n                  'Contributed to open source projects to address functional gaps.',\r\n                  'Introduced Google Fit and Samsung Health to LIFE Apps through Kotlin and native Android.',\r\n                  'Mentored an intern and provided feedback to his sponsor.'\r\n               ]\r\n            },\r\n            {\r\n               role: 'Software Engineer',\r\n               start: 'August 2018',\r\n               end: 'November 2019',\r\n               accomplishments: [\r\n                  'Migrated database mutations to a kinesis stream, enabling multiple services to observe all mutable operations.',\r\n                  'Designed a JSON transformation builder library to allow for rapid API transformations into a unified schema.',\r\n                  'Owned a new suite of microservices designed to ingest EHR, wearable device, and medical device data.',\r\n                  'Utilized AVA/Jest, Jenkins, and Terraform for CI/CD and IaC.',\r\n                  'Improved local development by mocking AWS services through Docker and localstack.'\r\n               ]\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         company: 'Indiana Health Information Exchange (IHIE)',\r\n         location: 'Indianapolis, IN',\r\n         positions: [\r\n            {\r\n               role: 'Solutions Engineer II',\r\n               start: 'March 2017',\r\n               end: 'August 2018',\r\n               accomplishments: [\r\n                  'Enhanced and supported legacy Java web applications.',\r\n                  'Identified and closed security vulnerabilities.',\r\n                  'Introduced code reviews, branching strategies, and other best development practices.',\r\n                  'Scripted several bash programs to generate complex audits from Tomcat logs and SQL records.',\r\n                  'Provided technical support and knowledge transfer for junior developers and contractors.',\r\n                  'Proposed and delivered on a multi-stage pilot delivery to regain pilot user confidence.'\r\n               ]\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         company: 'SapientRazorfish',\r\n         location: 'Dayton, OH',\r\n         positions: [\r\n            {\r\n               role: 'Software Engineer - eCommerce',\r\n               start: 'June 2015',\r\n               end: 'February 2017',\r\n               accomplishments: [\r\n                  'Implemented full-stack REST applications on Spring MVC and hybris.',\r\n                  'Constructed hybris technical specifications from client functional specifications for other developers to utilize.',\r\n                  'Tested various levels of functionality with JUnit and Mockito on a CI environment.',\r\n                  'Designed front-end pages and components from design documents and UX wireframes.',\r\n                  'Led a training session for the business team and answered questions in the respective client training session.'\r\n               ]\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         company: 'Google',\r\n         location: 'Mountain View, CA',\r\n         positions: [\r\n            {\r\n               role: 'Google Intern',\r\n               start: 'May 2013',\r\n               end: 'August 2013',\r\n               accomplishments: [\r\n                  'Designed multi-platform performance analysis tools for a rendering engine.',\r\n                  'Utilized LLVM to auto-insert profiling code to track method execution time.'\r\n               ]\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   skills: {\r\n      'Languages': [\r\n         'JavaScript/TypeScript',\r\n         'Java/Kotlin',\r\n         'C/C++',\r\n         'Python'\r\n      ],\r\n      'Platforms': [\r\n         'OS X',\r\n         'Ubuntu',\r\n         'Solaris',\r\n         'Windows',\r\n         'Android'\r\n      ],\r\n      'Additional Skills': [\r\n         'AWS',\r\n         'Scrum',\r\n         'Git',\r\n         'Jenkins',\r\n         'React',\r\n         'Spring MVC',\r\n         'OpenGL',\r\n         'Photoshop'\r\n      ]\r\n   }\r\n} as Resume; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Resume from './resume';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App resume={Resume}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}